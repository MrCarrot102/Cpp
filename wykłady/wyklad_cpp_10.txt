#include <wykład_cpp_23.01.2025>

Obsługa wątków nienazwanych{
	std::thread i std::jthread podlegają move semantics; 
	nie można ich kopiować;
	
	Jak "skopiować" nazwane wątki?{
		nie można workers.push_back(th); // to nie będzie działać
		
		std::move{
			musimy jawnie wskazać, że chcemy do wektroa przesunąć (a nie skopiować) nazwany obiekt (I-wartość); 
			std::move - "unieważnia" przenoszony obiekt dlatego jego destruktor nie wywoła terminate; 
		}

	Przekazywanie parametrów do wątków które uruchomiliśmy{
		Przez wartość{
			void th_fun(int i){
			} // jakaś funkcja która wymaga wartości

			std::jthread th ( &th_fun, i); // & - nie musi być, i to jest właśnie ta wartość funkcji którą chcemy przekazać
			workers.emplace_back(std::move(th)); 
		}

		Przez referencję std::ref{
			void th_fun(int &i){
			}

			std::jthread th (&th_fun, std::ref(i));  // przekazywanie przez referencje = race condition itd; 

		}
		
		Dygresja: Jak to działa?{
			konstruktor std::thread zaimplementowano jako tzw. variadic template: szablon o dowolnej liczbie parametrów; 
		}

		Przykład{ // dlaczego jest źle napisany
			program w 2 wątkach wyznacza liczbę wystąpień danej cyfry(0..9) w wektorze v; 
			argument map przekazywany jest przez referencje; 
		}
		
		Dygresja std::ref i std::cref {
			są to "wrappery" dla argumentów szablonów funkcji; 
			
			int x; 
			foo(std::ref(x)); // T jest zmieniane z int na int&; 

			int x; 
			foo(std::cref(x)); // T...
		}

		dlaczego "&" jest niebezpieczna?{ 
			przekazyhąc dnae przez referencję lub wskaźnikm tworzymy symulację, gdy wątek może operować bezpośrednio na (lokalnch) zmiennych cudzego wątku; 
		}
		
		const&{
			stała referencja jest tylko proteza; 
		}

		co zaminast &{ 
			kopiowanie danych do wątków roboczych;
		}

		jak przekazać dane z wątku roboczego?{
			promise and future; // pasywne czekanie, dużo wydajniejsze niż aktywne czekanie, które marnuje zasoby komputera
		}
		
		przykład{
			Dane dane; 		// zmienna globalna 
			bool ready = false; 	// zmienna globalna 
			// wątek 1 
			while(!ready){ 		// tutaj jest problem
				continue;	// aktywujemy watki które cały czas pracują
				use(dane);	// aktywne nasłuchiwanie, nie powinniśmy pisać takich rzeczy!
			}
			// wątek 2
			dane = factory.make(); 
			ready = true; 
		}

		kanał komunikacyjny {
			future -> shared state;
			promise -> future; // promise -> shared state	// watek 1 
			jeśli odpalimy 2 wątek to wtedy promise przenosimy na drugi watek; // tzw. watku roboczego 
			future zotaje w głównym wątku; 
			
			po ustawieniu .set_value(...); // przechodzi w taki tryb zombie
			ale aktuwyje się shared state; // auto val = 
			future też będzie jednorazowego użytku; // .get()
			
		}


		przykład{ 
			#include <iostream>
			#include <string>
			#include <thread. 
			#inlude <future> 

			void my_fun(std::promise<std:string> prms){
				prms.set_value(std::string("cos\n");
			}

			int main(){
				std::promise<std::string> prms;
				std::future<std::string> fut = prms.get_future();
				std::jthread th(&my_fun, std::move(prms));
				std::cout << "main pretends working..."; 
				std::string str = fut.get(); // nie przejdę przez ta funkcję jak nie dostanę danych
			}
		}
		obsługa wyjątków{ 
			try {
				std::string str("cos); 
				prms.set_value(str); 			// wątek główny main()
				prms.set_value(str); // throw std::future_error
			}
			catch(std::exception &){
				std::cout <<"problem"; // wątek poboczny, catch()
			}

			obsługa wyjątków - standardowa, o ile nie musimy ich przekazywać do wątku głównego...
			
			try{
				std::string str("cos");
				throw std::runtime_error("");
				prms.set_value(str); // nigdy się nie wywoła
			}
			wyjątek przed promise::set_value(){
				należy wyłapać; 
				ustawić w obiekcie std::promise{ 
					- funkcją set_exception); 
					- używaj std::current_exception(); 
					- po ustawieniu wyjątku w "shared state" obiekt std::future przerywa blokadę i zgłasza ten wyjątek w swoim wątku; 
				}
				wyjątek po (nie) promise::set_value(){ // nie robimy tak! bo nie jesteśmy w tanie zapewnic synchronizacji
					std::promise może zapisać albo wartość, albo wyjątek, ale nie oba naraz; 
					bo std::future już mógł zwolnić barierę; 
				}

		}
	}		
}
	
